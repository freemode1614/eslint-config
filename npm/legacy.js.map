{"version":3,"sources":["../src/legacy.ts","../src/base.ts","../src/overrides/json.ts","../src/overrides/react.ts","../src/overrides/test.ts","../src/overrides/typescript.ts"],"names":["resolve","readJSONSync","isESModule","isUsingTypescript","isUsingReact","isUsingPrettier","config","legacy","files","isUsingJest","configs"],"mappings":"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","sourcesContent":["import { resolve } from \"node:path\";\n\nimport { readJSONSync } from \"fs-extra\";\n\nimport { legacy as baseConfigGen } from \"@/base.js\";\nimport { legacy as jsonConfigGen } from \"@/overrides/json.js\";\nimport { legacy as reactConfigGen } from \"@/overrides/react.js\";\nimport { legacy as testConfigGen } from \"@/overrides/test\";\nimport { legacy as tsConfigGen } from \"@/overrides/typescript.js\";\n\n/**\n */\nconst package_ = readJSONSync(resolve(process.cwd(), \"package.json\"), {\n  throws: false,\n});\n\nif (!package_) {\n  throw new Error(\n    \"No `package.json` found in local, make sure you using eslint in a valid nodejs package which include a `package.json` file.\",\n  );\n}\n\nconst {\n  dependencies = {}, //\n  devDependencies = {},\n  peerDependencies = {},\n} = package_;\n\nconst localProjectDeps = Object.keys(Object.assign({}, dependencies, devDependencies, peerDependencies));\n\nconst isUsingReact = localProjectDeps.includes(\"react\");\nconst isUsingPrettier = localProjectDeps.includes(\"prettier\");\nconst isUsingTypescript = localProjectDeps.includes(\"typescript\");\nconst isUsingJest = localProjectDeps.includes(\"jest\");\n\nconst isESModule = package_.type === \"module\";\n\n/**\n */\nconst overrides = [\n  jsonConfigGen(), //\n  reactConfigGen({ isUsingTypescript }),\n  testConfigGen({ isUsingJest }),\n];\n\nif (isUsingTypescript) {\n  overrides.push(tsConfigGen());\n}\n\nconst config = baseConfigGen({\n  isESModule,\n  isUsingPrettier,\n  isUsingReact,\n  isUsingTypescript,\n  extraConfig: {\n    overrides,\n  },\n});\n\nif (!process.env.DEBUGGER_LOG_MOCCONA_ESLINT_CONFIG) {\n  console.log(`config ->`, config);\n  process.env.DEBUGGER_LOG_MOCCONA_ESLINT_CONFIG = \"LOGGED\";\n}\n\nexport default config;\n","import { Linter } from \"eslint\";\nimport * as compat from \"eslint-plugin-compat\";\nimport * as import_ from \"eslint-plugin-import\";\nimport jsdoc from \"eslint-plugin-jsdoc\";\nimport n from \"eslint-plugin-n\";\nimport prettierRecommended from \"eslint-plugin-prettier/recommended\";\nimport simpleImportSort from \"eslint-plugin-simple-import-sort\";\nimport unicorn from \"eslint-plugin-unicorn\";\n\nconst settings: Linter.Config[\"settings\"] = {\n  \"import/parsers\": {\n    \"@typescript-eslint/parser\": [\".ts\", \".tsx\"],\n  },\n  \"import/resolver\": {\n    typescript: {\n      alwaysTryTypes: true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`\n      project: [\n        \"tsconfig.json\", //\n        \"packages/*/tsconfig.json\",\n      ],\n    },\n  },\n  jsdoc: {\n    tagNamePreference: {\n      arg: \"arg\",\n      argument: \"argument\",\n      const: \"const\",\n      constructor: \"constructor\",\n      defaultvalue: \"defaultvalue\",\n      desc: \"desc\",\n      emits: \"emits\",\n      exception: \"exception\",\n      extends: \"extends\",\n      fileoverview: \"fileoverview\",\n      func: \"func\",\n      host: \"host\",\n      method: \"method\",\n      overview: \"overview\",\n      prop: \"prop\",\n      return: \"return\",\n      var: \"var\",\n      virtual: \"virtual\",\n      yield: \"yield\",\n    },\n  },\n  node: {\n    typescriptExtensionMap: [\n      [\"\", \".js\"],\n      [\".ts\", \".js\"],\n      [\".cts\", \".cjs\"],\n      [\".mts\", \".mjs\"],\n      [\".tsx\", \".jsx\"],\n    ],\n  },\n};\n\n/**\n *\n * @param root0 - Options\n * @param root0.isESModule - Project is using ES module.\n * @param root0.isUsingTypescript - Project is using Typescript.\n * @param root0.isUsingReact - Project is using React.\n * @returns - Rules\n */\nfunction customRules({\n  isESModule,\n  isUsingTypescript,\n  isUsingReact,\n}: {\n  isESModule: boolean;\n  isUsingTypescript: boolean;\n  isUsingReact: boolean;\n}) {\n  return {\n    \"simple-import-sort/imports\": \"error\",\n    \"simple-import-sort/exports\": \"error\",\n    \"jsdoc/require-jsdoc\": isUsingTypescript ? \"off\" : \"warn\",\n    \"jsdoc/require-returns\": isUsingTypescript ? \"off\" : \"warn\",\n    \"jsdoc/require-returns-description\": isUsingTypescript ? \"off\" : \"warn\",\n    \"jsdoc/require-param\": isUsingTypescript ? \"off\" : \"warn\",\n    \"jsdoc/require-param-description\": isUsingTypescript ? \"off\" : \"warn\",\n    \"jsdoc/check-param-names\": isUsingTypescript ? \"off\" : \"warn\",\n\n    \"n/no-missing-import\": \"off\",\n    \"n/no-missing-require\": \"off\",\n\n    // \"import/no-unresolved\": \"off\",\n    // \"n/no-missing-import\": \"off\",\n    \"unicorn/prefer-module\": isESModule ? \"error\" : \"off\",\n    \"unicorn/switch-case-braces\": \"off\",\n    \"unicorn/prevent-abbreviations\": [\n      \"warn\",\n      {\n        replacements: {\n          useRef: false,\n        },\n      },\n    ],\n    \"unicorn/filename-case\": [\n      \"warn\",\n      {\n        case: \"camelCase\",\n        ignore: [/API/, /JSON/, /App/],\n      },\n    ],\n    \"unicorn/prefer-set-has\": \"warn\",\n    \"unicorn/prefer-string-replace-all\": \"off\",\n    \"unicorn/no-array-callback-reference\": \"off\",\n    \"unicorn/no-array-push-push\": \"warn\",\n    \"unicorn/prefer-export-from\": \"warn\",\n    \"unicorn/no-array-for-each\": \"off\",\n    \"unicorn/import-style\": [\"warn\"],\n    \"unicorn/prefer-spread\": \"warn\",\n    \"unicorn/no-for-loop\": \"warn\",\n    // Disable no-null rule, since `null` is a valid ReactNode for function component.\n    \"unicorn/no-null\": isUsingReact ? \"off\" : \"warn\",\n    \"no-case-declarations\": \"off\",\n  };\n}\n\n/**\n * @param obj0 Options\n * @param obj0.isESModule - Project is using ES module.\n * @param obj0.isUsingReact - Project is using React.\n * @param obj0.isUsingPrettier - Project is using Prettier.\n * @param obj0.isUsingTypescript - Project is using Typescript.\n * @param [obj0.extraConfig] - Extra eslint config options.\n * @returns - Legacy Eslint Config For JSON Files.\n */\nexport function legacy({\n  isESModule,\n  isUsingReact,\n  isUsingPrettier,\n  isUsingTypescript,\n  extraConfig = {},\n}: {\n  isESModule: boolean;\n  isUsingReact: boolean;\n  isUsingPrettier: boolean;\n  isUsingTypescript: boolean;\n  extraConfig: Partial<Linter.Config>;\n}) {\n  const plugins = [\"compat\", \"jsdoc\", \"n\", \"simple-import-sort\", \"unicorn\"];\n\n  const extends_ = [\n    ...[`./rules/logic.js`, `./rules/suggestions.js`, `./rules/deprecated`].map((ruleFilePath) =>\n      require.resolve(ruleFilePath),\n    ),\n    `plugin:compat/recommended`,\n    `plugin:unicorn/recommended`,\n  ];\n\n  if (isESModule) {\n    // This plugin intends to support linting of ES2015+ (ES6+) import/export syntax,\n    // and prevent issues with misspelling of file paths and import names.\n    // All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.\n    plugins.push(\"import\");\n    extends_.push(`plugin:import/recommended`);\n    isUsingPrettier && extends_.push(`plugin:import/react`);\n    isUsingTypescript && extends_.push(`plugin:import/typescript`);\n  }\n\n  if (isESModule) {\n    extends_.push(`plugin:n/recommended-module`);\n  } else {\n    extends_.push(`plugin:n/recommended-script`);\n  }\n\n  if (isUsingPrettier) {\n    extends_.push(`plugin:prettier/recommended`);\n  } else {\n    extends_.push(require.resolve(\"./rules/styles.js\"));\n  }\n\n  if (isUsingTypescript) {\n    extends_.push(`plugin:jsdoc/recommended-typescript`);\n  } else {\n    extends_.push(`plugin:jsdoc/recommended`);\n  }\n\n  /**\n   */\n  const config = {\n    env: {\n      browser: true,\n      worker: true,\n      node: true,\n      commonjs: !isESModule,\n      es6: isESModule,\n      jest: true,\n    },\n    parserOptions: {\n      sourceType: isESModule ? \"module\" : \"commonjs\",\n      ecmaVersion: \"latest\",\n      ecmaFeatures: {\n        jsx: isUsingReact,\n        impliedStrict: true,\n        experimentalObjectRestSpread: true,\n      },\n    },\n    // Ignore css files and .d.ts files.\n    ignorePatterns: [\n      \"**/*.{css,less,stylus,pcss}\",\n      \"**/*.d.ts\",\n      \"**/npm/**\",\n      \"**/node_modules/**\",\n      \"**/build/**\",\n      \"**/dist/**\",\n      \"**/temp/**\",\n    ],\n    plugins,\n    extends: extends_,\n    settings,\n    rules: customRules({ isESModule, isUsingTypescript, isUsingReact }),\n    ...extraConfig,\n  };\n\n  return config;\n}\n\n/**\n * @param obj0 - Options\n * @param obj0.isESModule - Project is using ES module.\n * @param obj0.isUsingReact - Project is using React.\n * @param obj0.isUsingTypescript - Project is using Typescript.\n * @returns  - Flat Eslint Config For JSON Files.\n */\nexport function flat({\n  isESModule,\n  isUsingReact,\n  isUsingTypescript,\n}: {\n  isESModule: boolean;\n  isUsingReact: boolean;\n  isUsingTypescript: boolean;\n}) {\n  /**\n   */\n  const configs = [\n    {\n      files: [\"**/*.{js,cjs,mjs,jsx,ts,cts,mts,tsx}\"],\n      plugins: Object.assign({\n        n,\n        compat,\n        \"simple-import-sort\": simpleImportSort,\n        import: import_,\n        jsdoc,\n        unicorn,\n      }),\n      settings,\n      rules: Object.assign(\n        compat.configs.recommended.rules,\n        unicorn.configs.recommended.rules,\n        isUsingReact ? import_.configs.react.rules : {},\n        isUsingTypescript ? import_.configs.typescript.rules : {},\n        isESModule ? n.configs[\"flat/recommended-module\"].rules : n.configs[\"flat/recommended-script\"].rules,\n        customRules({ isESModule, isUsingTypescript, isUsingReact }),\n      ),\n    },\n    isUsingTypescript ? jsdoc.configs[\"flat/recommended-typescript\"] : jsdoc.configs[\"flat/recommended\"],\n    prettierRecommended,\n    {\n      ignores: [\n        \"**/*.{css,less,stylus,pcss}\",\n        \"**/*.d.ts\",\n        \"**/npm/**\",\n        \"**/node_modules/**\",\n        \"**/build/**\",\n        \"**/dist/**\",\n        \"**/temp/**\",\n      ],\n    },\n  ];\n\n  return configs;\n}\n","import jsonc from \"eslint-plugin-jsonc\";\n\n/**\n * @returns - Legacy Eslint Config For JSON Files.\n */\nexport function legacy() {\n  /**\n   */\n  const config = {\n    files: [\"**/*.json\"],\n    plugins: [\"jsonc\"],\n    extends: [\"plugin:jsonc/recommended-with-json\", \"plugin:jsonc/prettier\"],\n  };\n\n  return config;\n}\n\n/**\n * @returns  - Flat Eslint Config For JSON Files.\n */\nexport function flat() {\n  /**\n   */\n  const configs = [\n    ...jsonc.configs[\"flat/recommended-with-json\"], //\n    ...jsonc.configs[\"flat/prettier\"],\n  ];\n  return configs;\n}\n","import { resolve } from \"node:path\";\n\nimport jsxA11y from \"eslint-plugin-jsx-a11y\";\nimport react from \"eslint-plugin-react\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport { readJSONSync } from \"fs-extra\";\nimport globals from \"globals\";\nimport semver from \"semver\";\nimport { parser as tsParser } from \"typescript-eslint\";\n\nconst isReactVersionGreaterThan17 = (function checkReactVersion() {\n  // Add jsx-runtime for ReactV17 or higher version.\n  try {\n    /**\n     */\n    const reactPackage = readJSONSync(resolve(process.cwd(), \"node_modules/react/package.json\"));\n    return !!(reactPackage && semver.satisfies(reactPackage.version, \">=17\"));\n  } catch {\n    // Can't find react in local, just ignore the error and return a false.\n    return false;\n  }\n})();\n\nconst files = [\"**/*.{tsx,jsx}\"];\n\n/**\n * @param obj options.\n * @param obj.isUsingTypescript - Project is Using Typescript.\n * @returns - Legacy Eslint Config For React.\n */\nexport function legacy({ isUsingTypescript }: { isUsingTypescript: boolean }) {\n  /**\n   */\n  const config = {\n    // Write React in js or ts file is not recommended, so we just check jsx and tsx files.\n    files,\n    parser: isUsingTypescript ? \"@typescript-eslint/parser\" : undefined,\n    parserOptions: {\n      ecmaVersion: \"latest\",\n      sourceType: \"module\",\n      ecmaFeatures: {\n        jsx: true,\n        experimentalObjectRestSpread: true,\n        impliedStrict: true,\n      },\n    },\n    plugins: [\"react\", \"react-hooks\", \"jsx-a11y\", \"react-refresh\"],\n    extends: [\n      \"plugin:react/recommended\",\n      \"plugin:react-hooks/recommended\",\n      \"plugin:jsx-a11y/recommended\",\n      isReactVersionGreaterThan17 ? \"plugin:react/jsx-runtime\" : \"\",\n    ].filter(Boolean),\n    settings: { react: { version: \"detect\" } },\n    rules: {\n      // Force only export components from a TSX or JSX file.\n      \"react-refresh/only-export-components\": [\n        \"error\",\n        {\n          allowConstantExport: true,\n          allowExportNames: [\n            `action`, // The route action is called when a submission is sent to the route from a Form, fetcher, or submission.\n            `loader`, // The route loader is called before the route renders and provides data for the element through useLoaderData.\n            `caseSensitive`, // Instructs the route to match case or not.\n            `index`,\n            `handle`,\n            `errorElement`,\n            `ErrorBoundary`,\n            `shouldRevalidate`, // Using this API risks your UI getting out of sync with your data, use with caution!\n          ],\n        },\n      ],\n    },\n  };\n\n  return config;\n}\n\n/**\n * @returns - Flat Eslint Config For React.\n */\nexport function flat() {\n  /**\n   */\n  const languageOptions = {\n    parser: tsParser,\n    parserOptions: {\n      ecmaFeatures: {\n        jsx: true,\n        experimentalObjectRestSpread: true,\n        impliedStrict: true,\n      },\n    },\n    globals: {\n      ...globals.serviceworker,\n      ...globals.worker,\n      ...globals.builtin,\n      ...globals.browser,\n    },\n  };\n\n  /**\n   */\n  const configs = [\n    {\n      plugins: {\n        react: react,\n        \"react-hooks\": reactHooks,\n        \"jsx-a11y\": jsxA11y,\n        \"react-refresh\": reactRefresh,\n      },\n      languageOptions,\n      settings: { react: { version: \"detect\" } },\n    },\n    {\n      files,\n      rules: Object.assign(\n        {\n          // reactRefresh.configs.recommended.rules,\n          \"react-refresh/only-export-components\": [\n            \"error\",\n            {\n              checkJS: false,\n              allowConstantExport: true,\n              allowExportNames: [\n                `action`, // The route action is called when a submission is sent to the route from a Form, fetcher, or submission.\n                `loader`, // The route loader is called before the route renders and provides data for the element through useLoaderData.\n                `caseSensitive`, // Instructs the route to match case or not.\n                `index`,\n                `handle`,\n                `errorElement`,\n                `ErrorBoundary`,\n                `shouldRevalidate`, // Using this API risks your UI getting out of sync with your data, use with caution!\n              ],\n            },\n          ],\n        },\n        react.configs.recommended.rules,\n        reactHooks.configs.recommended.rules,\n        jsxA11y.configs.recommended.rules,\n        isReactVersionGreaterThan17 ? react.configs[\"jsx-runtime\"].rules : {},\n      ),\n    },\n  ];\n\n  return configs;\n}\n","import jest from \"eslint-plugin-jest\";\n\nconst files = [\"**/*.{spec,test}.{js,ts,jsx,tsx}\", \"tests?/*.{js,ts,jsx,tsx}\"];\n\n/**\n * @param root0 Options\n * @param root0.isUsingJest - Project is using jest\n * @returns - Legacy Eslint Configs For Test Files.\n */\nexport function legacy({ isUsingJest }: { isUsingJest: boolean }) {\n  /**\n   */\n  const config = {\n    files,\n    plugins: isUsingJest ? [\"jest\"] : [],\n    extends: isUsingJest ? [\"plugin:jest/all\"] : [],\n  };\n\n  return config;\n}\n\n/**\n * @param root0 Options\n * @param root0.isUsingJest - Project is using jest\n * @returns - Flat Eslint Configs For Test Files.\n */\nexport function flat({ isUsingJest }: { isUsingJest: boolean }) {\n  /**\n   */\n  const configs = isUsingJest\n    ? [\n        {\n          files,\n          ...jest.configs[\"flat/all\"],\n        },\n      ]\n    : [{ files }];\n\n  return configs;\n}\n","import { configs } from \"typescript-eslint\";\n\nconst files = [\"**/*.ts\", \"**/*.tsx\"];\n\n/**\n * @returns - Legacy Eslint Config For TS Files.\n */\nexport function legacy() {\n  /**\n   */\n  const config = {\n    files,\n    extends: [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n    parser: \"@typescript-eslint/parser\",\n    plugins: [\"@typescript-eslint\"],\n  };\n\n  return config;\n}\n\n/**\n * @returns - Flat Eslint Config For TS Files.\n */\nexport function flat() {\n  return [...configs.recommended, ...configs.stylistic].map((cfg) => {\n    return {\n      ...cfg,\n      files,\n    };\n  });\n}\n"]}
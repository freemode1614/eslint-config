{"version":3,"sources":["../src/legacy.ts"],"names":["legacy"],"mappings":";;;;;;;;;AAAA,SAAS,eAAe;AAExB,SAAS,oBAAoB;AAU7B,IAAM,WAAW,aAAa,QAAQ,QAAQ,IAAI,GAAG,cAAc,GAAG;AAAA,EACpE,QAAQ;AACV,CAAC;AAED,IAAI,CAAC,UAAU;AACb,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;AAEA,IAAM;AAAA,EACJ,eAAe,CAAC;AAAA;AAAA,EAChB,kBAAkB,CAAC;AAAA,EACnB,mBAAmB,CAAC;AACtB,IAAI;AAEJ,IAAM,mBAAmB,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,cAAc,iBAAiB,gBAAgB,CAAC;AAEvG,IAAM,eAAe,iBAAiB,SAAS,OAAO;AACtD,IAAM,kBAAkB,iBAAiB,SAAS,UAAU;AAC5D,IAAM,oBAAoB,iBAAiB,SAAS,YAAY;AAChE,IAAM,cAAc,iBAAiB,SAAS,MAAM;AAEpD,IAAM,aAAa,SAAS,SAAS;AAIrC,IAAM,YAAY;AAAA,EAChBA,QAAc;AAAA;AAAA,EACdA,QAAe,EAAE,kBAAkB,CAAC;AAAA,EACpCA,QAAc,EAAE,YAAY,CAAC;AAC/B;AAEA,IAAI,mBAAmB;AACrB,YAAU,KAAKA,QAAY,CAAC;AAC9B;AAEA,IAAM,SAAS,OAAc;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,IACX;AAAA,EACF;AACF,CAAC;AAED,IAAI,CAAC,QAAQ,IAAI,oCAAoC;AACnD,UAAQ,IAAI,aAAa,MAAM;AAC/B,UAAQ,IAAI,qCAAqC;AACnD;AAEA,IAAO,iBAAQ","sourcesContent":["import { resolve } from \"node:path\";\n\nimport { readJSONSync } from \"fs-extra\";\n\nimport { legacy as baseConfigGen } from \"@/base.js\";\nimport { legacy as jsonConfigGen } from \"@/overrides/json.js\";\nimport { legacy as reactConfigGen } from \"@/overrides/react.js\";\nimport { legacy as testConfigGen } from \"@/overrides/test\";\nimport { legacy as tsConfigGen } from \"@/overrides/typescript.js\";\n\n/**\n */\nconst package_ = readJSONSync(resolve(process.cwd(), \"package.json\"), {\n  throws: false,\n});\n\nif (!package_) {\n  throw new Error(\n    \"No `package.json` found in local, make sure you using eslint in a valid nodejs package which include a `package.json` file.\",\n  );\n}\n\nconst {\n  dependencies = {}, //\n  devDependencies = {},\n  peerDependencies = {},\n} = package_;\n\nconst localProjectDeps = Object.keys(Object.assign({}, dependencies, devDependencies, peerDependencies));\n\nconst isUsingReact = localProjectDeps.includes(\"react\");\nconst isUsingPrettier = localProjectDeps.includes(\"prettier\");\nconst isUsingTypescript = localProjectDeps.includes(\"typescript\");\nconst isUsingJest = localProjectDeps.includes(\"jest\");\n\nconst isESModule = package_.type === \"module\";\n\n/**\n */\nconst overrides = [\n  jsonConfigGen(), //\n  reactConfigGen({ isUsingTypescript }),\n  testConfigGen({ isUsingJest }),\n];\n\nif (isUsingTypescript) {\n  overrides.push(tsConfigGen());\n}\n\nconst config = baseConfigGen({\n  isESModule,\n  isUsingPrettier,\n  isUsingReact,\n  isUsingTypescript,\n  extraConfig: {\n    overrides,\n  },\n});\n\nif (!process.env.DEBUGGER_LOG_MOCCONA_ESLINT_CONFIG) {\n  console.log(`config ->`, config);\n  process.env.DEBUGGER_LOG_MOCCONA_ESLINT_CONFIG = \"LOGGED\";\n}\n\nexport default config;\n"]}